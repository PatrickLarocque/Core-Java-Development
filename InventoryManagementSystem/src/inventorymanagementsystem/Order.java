package inventorymanagementsystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import net.proteanit.sql.DbUtils;
import java.time.LocalDateTime;  
import java.time.format.DateTimeFormatter;  
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Patrick Larocque
 */
public class Order extends javax.swing.JFrame {

    /**
     * Creates new form Order
     */
    public Order() {
        initComponents();
        displayCustomers();
        displayProducts();
        getDate();
        orderIDField.setText(String.valueOf(orderID));
    }
    
    Connection connection = null;
    Statement statement = null;
    ResultSet results = null;
    
    int orderID = getCurrentOrderID() + 1;
    double pricePerUnit, totalProductPrice, totalInvoiceAmount;
    
    
    public void displayCustomers() {
        try {
            connection = DriverManager.getConnection("jdbc:derby://localhost:1527/InventoryDB", "sa", "admin");
            statement = connection.createStatement();
            results = statement.executeQuery("SELECT * FROM CUSTOMER");
            orderCustomerTable.setModel(DbUtils.resultSetToTableModel(results));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    private int getCurrentOrderID() {
        try {
            connection = DriverManager.getConnection("jdbc:derby://localhost:1527/InventoryDB", "sa", "admin");
            Statement getLastOrderID = connection.createStatement();
            results = getLastOrderID.executeQuery("SELECT MAX(Order_ID) FROM SA.ORDERS");
            if (results.next()) {
                int currentOrderID = results.getInt(1);
                connection.close();
                return currentOrderID;

            } else {
                connection.close();
                return 0;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            return 0;
        }     
}

    public void displayProducts() {
        try {
            connection = DriverManager.getConnection("jdbc:derby://localhost:1527/InventoryDB", "sa", "admin");
            statement = connection.createStatement();
            results = statement.executeQuery("SELECT * FROM PRODUCT");
            orderProductTable.setModel(DbUtils.resultSetToTableModel(results));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void getDate() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
        LocalDateTime currentTime = LocalDateTime.now();
        orderOrderDate.setText(formatter.format(currentTime));    
    }
    
    private void updateQuantity() {
        try {
            connection = DriverManager.getConnection("jdbc:derby://localhost:1527/InventoryDB", "sa", "admin");
            DefaultTableModel model = (DefaultTableModel)orderOrderSummaryTable.getModel();
            for (int i = 0; i < orderOrderSummaryTable.getRowCount(); i++) {
                String productName = model.getValueAt(i, 1).toString();
                Statement getQuantity = connection.createStatement();
                results = getQuantity.executeQuery("SELECT Product_Quantity FROM SA.PRODUCT WHERE Product_Name = '" + productName + "'");
                if (results.next()) {
                    int prevQuantity = results.getInt(1);
                    int newQuantity = prevQuantity - Integer.valueOf(model.getValueAt(i, 2).toString());
                    String updateQuantity = "UPDATE SA.PRODUCT SET Product_Quantity = " + newQuantity + " WHERE Product_Name = '" + productName + "'";
                    Statement update = connection.createStatement();
                    update.executeUpdate(updateQuantity);  
                } else {
                    JOptionPane.showMessageDialog(this, "Error updating quantity.");
                }
            }
            connection.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        orderPanel = new javax.swing.JPanel();
        orderProductTablePanel = new javax.swing.JScrollPane();
        orderProductTable = new javax.swing.JTable();
        orderTopPanel = new javax.swing.JPanel();
        orderTitle = new javax.swing.JLabel();
        orderHeader = new javax.swing.JLabel();
        orderProductList = new javax.swing.JLabel();
        orderCustomerTablePanel = new javax.swing.JScrollPane();
        orderCustomerTable = new javax.swing.JTable();
        orderCustomerList = new javax.swing.JLabel();
        orderBottomPanel = new javax.swing.JPanel();
        orderCredits = new javax.swing.JLabel();
        orderBrand = new javax.swing.JLabel();
        orderMainMenuButton = new javax.swing.JButton();
        orderPrintInvoiceButton = new javax.swing.JButton();
        orderOrderSummaryTablePanel = new javax.swing.JScrollPane();
        orderOrderSummaryTable = new javax.swing.JTable();
        orderSummary = new javax.swing.JLabel();
        orderAddToOrderButton = new javax.swing.JButton();
        orderOrderDate = new javax.swing.JLabel();
        orderCustomerNameField = new javax.swing.JTextField();
        orderQuantity = new javax.swing.JLabel();
        orderQuantityField = new javax.swing.JTextField();
        orderProductField = new javax.swing.JTextField();
        orderProduct = new javax.swing.JLabel();
        orderViewOrdersButton = new javax.swing.JButton();
        orderFinalizeOrderButton = new javax.swing.JButton();
        orderSearchButton = new javax.swing.JButton();
        orderCustomerName = new javax.swing.JLabel();
        orderDate = new javax.swing.JLabel();
        orderPriceField = new javax.swing.JTextField();
        orderPrice = new javax.swing.JLabel();
        orderInvoiceTotal = new javax.swing.JLabel();
        orderTotalAmount = new javax.swing.JLabel();
        orderIDText = new javax.swing.JLabel();
        orderIDField = new javax.swing.JLabel();
        orderClearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        orderProductTable.setFont(new java.awt.Font("Cascadia Code", 0, 16)); // NOI18N
        orderProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Name", "Quantity", "Price", "Description", "Category"
            }
        ));
        orderProductTable.setRowHeight(25);
        orderProductTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderProductTableMouseClicked(evt);
            }
        });
        orderProductTablePanel.setViewportView(orderProductTable);

        orderTopPanel.setBackground(new java.awt.Color(66, 68, 74));

        orderTitle.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        orderTitle.setForeground(new java.awt.Color(255, 255, 255));
        orderTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderTitle.setText("Order Menu");

        orderHeader.setFont(new java.awt.Font("OCR A Extended", 1, 30)); // NOI18N
        orderHeader.setForeground(new java.awt.Color(255, 255, 255));
        orderHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderHeader.setText("Inventory Management System");

        javax.swing.GroupLayout orderTopPanelLayout = new javax.swing.GroupLayout(orderTopPanel);
        orderTopPanel.setLayout(orderTopPanelLayout);
        orderTopPanelLayout.setHorizontalGroup(
            orderTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderTopPanelLayout.createSequentialGroup()
                .addGroup(orderTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(orderTopPanelLayout.createSequentialGroup()
                        .addGap(648, 648, 648)
                        .addComponent(orderTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(orderTopPanelLayout.createSequentialGroup()
                        .addGap(420, 420, 420)
                        .addComponent(orderHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        orderTopPanelLayout.setVerticalGroup(
            orderTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderTopPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(orderHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderTitle)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        orderProductList.setFont(new java.awt.Font("Cascadia Code", 1, 20)); // NOI18N
        orderProductList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderProductList.setText("Product List");

        orderCustomerTable.setFont(new java.awt.Font("Cascadia Code", 0, 16)); // NOI18N
        orderCustomerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Name", "Phone"
            }
        ));
        orderCustomerTable.setRowHeight(25);
        orderCustomerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderCustomerTableMouseClicked(evt);
            }
        });
        orderCustomerTablePanel.setViewportView(orderCustomerTable);

        orderCustomerList.setFont(new java.awt.Font("Cascadia Code", 1, 20)); // NOI18N
        orderCustomerList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderCustomerList.setText("Customer List");

        orderBottomPanel.setBackground(new java.awt.Color(66, 68, 74));

        orderCredits.setFont(new java.awt.Font("OCR A Extended", 1, 14)); // NOI18N
        orderCredits.setForeground(new java.awt.Color(255, 255, 255));
        orderCredits.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderCredits.setText("Software by Patrick");

        orderBrand.setFont(new java.awt.Font("OCR A Extended", 1, 28)); // NOI18N
        orderBrand.setForeground(new java.awt.Color(255, 255, 255));
        orderBrand.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderBrand.setText("invSYS");

        orderMainMenuButton.setFont(new java.awt.Font("Cascadia Code", 1, 14)); // NOI18N
        orderMainMenuButton.setText("Main Menu");
        orderMainMenuButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderMainMenuButtonMouseClicked(evt);
            }
        });

        orderPrintInvoiceButton.setFont(new java.awt.Font("Cascadia Code", 1, 14)); // NOI18N
        orderPrintInvoiceButton.setText("Print Invoice");
        orderPrintInvoiceButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderPrintInvoiceButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout orderBottomPanelLayout = new javax.swing.GroupLayout(orderBottomPanel);
        orderBottomPanel.setLayout(orderBottomPanelLayout);
        orderBottomPanelLayout.setHorizontalGroup(
            orderBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderBottomPanelLayout.createSequentialGroup()
                .addGroup(orderBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(orderBottomPanelLayout.createSequentialGroup()
                        .addGap(519, 519, 519)
                        .addComponent(orderCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(orderBottomPanelLayout.createSequentialGroup()
                        .addGap(646, 646, 646)
                        .addComponent(orderBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(orderPrintInvoiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(orderMainMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );
        orderBottomPanelLayout.setVerticalGroup(
            orderBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderBottomPanelLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(orderBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderBottomPanelLayout.createSequentialGroup()
                        .addComponent(orderBrand)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orderCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderBottomPanelLayout.createSequentialGroup()
                        .addGroup(orderBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderMainMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderPrintInvoiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33))))
        );

        orderOrderSummaryTable.setFont(new java.awt.Font("Cascadia Code", 0, 16)); // NOI18N
        orderOrderSummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Product", "Quantity", "Customer", "Price", "Total", "Date"
            }
        ));
        orderOrderSummaryTable.setRowHeight(25);
        orderOrderSummaryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderOrderSummaryTableMouseClicked(evt);
            }
        });
        orderOrderSummaryTablePanel.setViewportView(orderOrderSummaryTable);

        orderSummary.setFont(new java.awt.Font("Cascadia Code", 1, 20)); // NOI18N
        orderSummary.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderSummary.setText("Order Summary");

        orderAddToOrderButton.setFont(new java.awt.Font("Cascadia Code", 1, 14)); // NOI18N
        orderAddToOrderButton.setText("Add To Order");
        orderAddToOrderButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderAddToOrderButtonMouseClicked(evt);
            }
        });

        orderOrderDate.setFont(new java.awt.Font("Cascadia Code", 0, 14)); // NOI18N
        orderOrderDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderOrderDate.setText("Date");

        orderCustomerNameField.setFont(new java.awt.Font("Cascadia Code", 0, 16)); // NOI18N

        orderQuantity.setFont(new java.awt.Font("Cascadia Code", 0, 18)); // NOI18N
        orderQuantity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderQuantity.setText("Quantity");

        orderQuantityField.setFont(new java.awt.Font("Cascadia Code", 0, 16)); // NOI18N

        orderProductField.setFont(new java.awt.Font("Cascadia Code", 0, 16)); // NOI18N

        orderProduct.setFont(new java.awt.Font("Cascadia Code", 0, 18)); // NOI18N
        orderProduct.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderProduct.setText("Product");

        orderViewOrdersButton.setFont(new java.awt.Font("Cascadia Code", 1, 14)); // NOI18N
        orderViewOrdersButton.setText("View Orders");
        orderViewOrdersButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderViewOrdersButtonMouseClicked(evt);
            }
        });

        orderFinalizeOrderButton.setFont(new java.awt.Font("Cascadia Code", 1, 14)); // NOI18N
        orderFinalizeOrderButton.setText("Finalize Order");
        orderFinalizeOrderButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderFinalizeOrderButtonMouseClicked(evt);
            }
        });

        orderSearchButton.setFont(new java.awt.Font("Cascadia Code", 1, 14)); // NOI18N
        orderSearchButton.setText("Search");
        orderSearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderSearchButtonMouseClicked(evt);
            }
        });

        orderCustomerName.setFont(new java.awt.Font("Cascadia Code", 0, 18)); // NOI18N
        orderCustomerName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderCustomerName.setText("Customer Name");

        orderDate.setFont(new java.awt.Font("Cascadia Code", 0, 18)); // NOI18N
        orderDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderDate.setText("Date");

        orderPriceField.setFont(new java.awt.Font("Cascadia Code", 0, 16)); // NOI18N

        orderPrice.setFont(new java.awt.Font("Cascadia Code", 0, 18)); // NOI18N
        orderPrice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderPrice.setText("Price");

        orderInvoiceTotal.setFont(new java.awt.Font("Cascadia Code", 0, 16)); // NOI18N
        orderInvoiceTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderInvoiceTotal.setText(" ");

        orderTotalAmount.setFont(new java.awt.Font("Cascadia Code", 0, 18)); // NOI18N
        orderTotalAmount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderTotalAmount.setText("Total Amount");

        orderIDText.setFont(new java.awt.Font("Cascadia Code", 0, 18)); // NOI18N
        orderIDText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderIDText.setText("Order ID");

        orderIDField.setFont(new java.awt.Font("Cascadia Code", 0, 18)); // NOI18N
        orderIDField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderIDField.setText("ID");

        orderClearButton.setFont(new java.awt.Font("Cascadia Code", 1, 14)); // NOI18N
        orderClearButton.setText("Clear");
        orderClearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderClearButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout orderPanelLayout = new javax.swing.GroupLayout(orderPanel);
        orderPanel.setLayout(orderPanelLayout);
        orderPanelLayout.setHorizontalGroup(
            orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(orderTopPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                .addGap(235, 235, 235)
                .addComponent(orderCustomerList, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(orderProductList, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(237, 237, 237))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(orderIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderQuantity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(orderProductField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addGap(0, 27, Short.MAX_VALUE)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(orderCustomerTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(orderPanelLayout.createSequentialGroup()
                                        .addComponent(orderSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(orderAddToOrderButton)
                                        .addGap(12, 12, 12)
                                        .addComponent(orderClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(orderPanelLayout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(orderCustomerName)
                                        .addGap(31, 31, 31)
                                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(orderCustomerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(orderQuantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                                        .addComponent(orderIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                                        .addComponent(orderFinalizeOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(orderViewOrdersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(orderPanelLayout.createSequentialGroup()
                                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(orderPanelLayout.createSequentialGroup()
                                                .addGap(17, 17, 17)
                                                .addComponent(orderPrice)
                                                .addGap(58, 58, 58))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                                                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(orderProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(27, 27, 27)))
                                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(orderPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(orderOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                .addGap(85, 85, 85)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(orderProductTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                        .addComponent(orderOrderSummaryTablePanel))
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addComponent(orderSummary, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orderTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orderInvoiceTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)))
                .addGap(51, 51, 51))
            .addComponent(orderBottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        orderPanelLayout.setVerticalGroup(
            orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderPanelLayout.createSequentialGroup()
                .addComponent(orderTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderProductList)
                    .addComponent(orderCustomerList))
                .addGap(18, 18, 18)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(orderCustomerTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                    .addComponent(orderProductTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addGap(0, 32, Short.MAX_VALUE)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderProductField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderCustomerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderQuantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderViewOrdersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderFinalizeOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderAddToOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderInvoiceTotal)
                            .addComponent(orderTotalAmount)
                            .addComponent(orderSummary))
                        .addGap(8, 8, 8)
                        .addComponent(orderOrderSummaryTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(31, 31, 31)
                .addComponent(orderBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(orderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(orderPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void orderProductTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderProductTableMouseClicked
        DefaultTableModel model = (DefaultTableModel)orderProductTable.getModel();
        int index = orderProductTable.getSelectedRow();
        orderProductField.setText(model.getValueAt(index, 1).toString());
        orderPriceField.setText(model.getValueAt(index, 3).toString());
    }//GEN-LAST:event_orderProductTableMouseClicked

    private void orderCustomerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderCustomerTableMouseClicked
        DefaultTableModel model = (DefaultTableModel)orderCustomerTable.getModel();
        int index = orderCustomerTable.getSelectedRow();
        orderCustomerNameField.setText(model.getValueAt(index, 1).toString());     
    }//GEN-LAST:event_orderCustomerTableMouseClicked

    private void orderOrderSummaryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderOrderSummaryTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_orderOrderSummaryTableMouseClicked

    private void orderAddToOrderButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderAddToOrderButtonMouseClicked
        if (orderProductField.getText().isEmpty() || orderPriceField.getText().isEmpty() || orderQuantityField.getText().isEmpty() || orderCustomerNameField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Missing Information. Please fill out all required fields to begin an order.");
        }
        if (Integer.valueOf(orderQuantityField.getText()) <= 0 && !(orderProductField.getText().isEmpty() || orderPriceField.getText().isEmpty() || orderQuantityField.getText().isEmpty() || orderCustomerNameField.getText().isEmpty())) {
            JOptionPane.showMessageDialog(this, "Minium order quantity of 1.");
        } else { 
            try {
            String quantity = orderQuantityField.getText();
            Integer.parseInt(quantity);
            String price = orderPriceField.getText();
            Double.parseDouble(price);
            String id = orderIDField.getText();
            Integer.parseInt(id);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Invalid entries.");
            }
            pricePerUnit = Double.valueOf(orderPriceField.getText());
            totalProductPrice = pricePerUnit * Integer.valueOf(orderQuantityField.getText());
            Vector order = new Vector();
            order.add(orderID);
            order.add(orderProductField.getText());
            order.add(orderQuantityField.getText());
            order.add(orderCustomerNameField.getText());
            order.add(pricePerUnit);
            order.add(totalProductPrice);
            order.add(orderOrderDate.getText());
            DefaultTableModel tableModel = (DefaultTableModel)orderOrderSummaryTable.getModel();
            tableModel.addRow(order);
            totalInvoiceAmount += totalProductPrice;
            orderInvoiceTotal.setText(String.valueOf("$" + totalInvoiceAmount));
            orderID++;
            orderIDField.setText(String.valueOf(orderID));
        }
    }//GEN-LAST:event_orderAddToOrderButtonMouseClicked

    private void orderViewOrdersButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderViewOrdersButtonMouseClicked
        new OrderHistory().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_orderViewOrdersButtonMouseClicked

    private void orderFinalizeOrderButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderFinalizeOrderButtonMouseClicked
        if (orderOrderSummaryTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Please fill out a valid order before finalizing.");            
        } else { 
            try {
                connection = DriverManager.getConnection("jdbc:derby://localhost:1527/InventoryDB", "sa", "admin");
                DefaultTableModel model = (DefaultTableModel)orderOrderSummaryTable.getModel();
                for (int i = 0; i < orderOrderSummaryTable.getRowCount(); i++) {
                    PreparedStatement add = connection.prepareStatement("INSERT into ORDERS VALUES (?, ?, ?, ?, ?, ?, ?)");
                    add.setInt(1, Integer.valueOf(model.getValueAt(i, 0).toString()));
                    add.setString(2, model.getValueAt(i, 1).toString());
                    add.setInt(3, Integer.valueOf(model.getValueAt(i, 2).toString()));
                    add.setString(4, model.getValueAt(i, 3).toString());
                    add.setDouble(5, Double.valueOf(model.getValueAt(i, 4).toString()));
                    add.setDouble(6, Double.valueOf(model.getValueAt(i, 5).toString()));
                    add.setString(7, model.getValueAt(i, 6).toString());
                    int row = add.executeUpdate();
                    updateQuantity();
                    add.close();
                }
                connection.close();
                JOptionPane.showMessageDialog(this, "Order invoiced sucessfully.");
                displayProducts();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }               
        }    
    }//GEN-LAST:event_orderFinalizeOrderButtonMouseClicked

    private void orderSearchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderSearchButtonMouseClicked
        if (orderProductField.getText().isEmpty() && orderCustomerNameField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter either a product name or customer name to search");
        } else {
            try {
                connection = DriverManager.getConnection("jdbc:derby://localhost:1527/InventoryDB", "sa", "admin");
                statement = connection.createStatement();
                if (!orderProductField.getText().isEmpty()) {
                    if (orderProductField.getText().equalsIgnoreCase("all")) {
                    results = statement.executeQuery("SELECT * FROM SA.PRODUCT");
                    orderProductTable.setModel(DbUtils.resultSetToTableModel(results));                        
                    } else {
                    results = statement.executeQuery("SELECT * FROM SA.PRODUCT WHERE UPPER(Product_Name) LIKE UPPER('%" + orderProductField.getText() + "%')");
                    orderProductTable.setModel(DbUtils.resultSetToTableModel(results));                        
                    }
                    if (orderProductTable.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(this, "No results.");
                    }
                }
                if (!orderCustomerNameField.getText().isEmpty()) {
                    if (orderCustomerNameField.getText().equalsIgnoreCase("all")) {
                    results = statement.executeQuery("SELECT * FROM SA.CUSTOMER");
                    orderCustomerTable.setModel(DbUtils.resultSetToTableModel(results));                        
                    } else {
                    results = statement.executeQuery("SELECT * FROM SA.CUSTOMER WHERE UPPER(Customer_Name) LIKE UPPER('%" + orderCustomerNameField.getText() + "%')");
                    orderCustomerTable.setModel(DbUtils.resultSetToTableModel(results));                        
                    }
                    if (orderCustomerTable.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(this, "No results.");    
                    }
                }
                connection.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_orderSearchButtonMouseClicked

    private void orderMainMenuButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderMainMenuButtonMouseClicked
        new MainMenu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_orderMainMenuButtonMouseClicked

    private void orderClearButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderClearButtonMouseClicked
        orderCustomerNameField.setText("");
        orderProductField.setText("");
        orderQuantityField.setText("");
        orderPriceField.setText("");
        DefaultTableModel model = (DefaultTableModel) orderOrderSummaryTable.getModel();
        model.setRowCount(0);
        displayCustomers();
        displayProducts();
    }//GEN-LAST:event_orderClearButtonMouseClicked

    private void orderPrintInvoiceButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderPrintInvoiceButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_orderPrintInvoiceButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Order().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton orderAddToOrderButton;
    private javax.swing.JPanel orderBottomPanel;
    private javax.swing.JLabel orderBrand;
    private javax.swing.JButton orderClearButton;
    private javax.swing.JLabel orderCredits;
    private javax.swing.JLabel orderCustomerList;
    private javax.swing.JLabel orderCustomerName;
    private javax.swing.JTextField orderCustomerNameField;
    private javax.swing.JTable orderCustomerTable;
    private javax.swing.JScrollPane orderCustomerTablePanel;
    private javax.swing.JLabel orderDate;
    private javax.swing.JButton orderFinalizeOrderButton;
    private javax.swing.JLabel orderHeader;
    private javax.swing.JLabel orderIDField;
    private javax.swing.JLabel orderIDText;
    private javax.swing.JLabel orderInvoiceTotal;
    private javax.swing.JButton orderMainMenuButton;
    private javax.swing.JLabel orderOrderDate;
    private javax.swing.JTable orderOrderSummaryTable;
    private javax.swing.JScrollPane orderOrderSummaryTablePanel;
    private javax.swing.JPanel orderPanel;
    private javax.swing.JLabel orderPrice;
    private javax.swing.JTextField orderPriceField;
    private javax.swing.JButton orderPrintInvoiceButton;
    private javax.swing.JLabel orderProduct;
    private javax.swing.JTextField orderProductField;
    private javax.swing.JLabel orderProductList;
    private javax.swing.JTable orderProductTable;
    private javax.swing.JScrollPane orderProductTablePanel;
    private javax.swing.JLabel orderQuantity;
    private javax.swing.JTextField orderQuantityField;
    private javax.swing.JButton orderSearchButton;
    private javax.swing.JLabel orderSummary;
    private javax.swing.JLabel orderTitle;
    private javax.swing.JPanel orderTopPanel;
    private javax.swing.JLabel orderTotalAmount;
    private javax.swing.JButton orderViewOrdersButton;
    // End of variables declaration//GEN-END:variables
}
